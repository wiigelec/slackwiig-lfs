#!/bin/bash

####################################################################
#
#
#
####################################################################


####################################################################
#
# INSTALL FUNCTIONS
#
####################################################################


#------------------------------------------------------------------#
function install_configure
{
	### Confirm ###
	echo
	read -p "Configure $ROOT installation? (Yes): " confirm
	if [[ $confirm != "Yes" ]]; then echo "Cancelling configuration..."; return; fi

	### Set root passwd ###
	echo
	echo "Setting new root password:"
	echo

	utility_mount_kernelfs
	if [[ $? != 0 ]]; then echo "Error mounting kernel filesystems."; exit 1; fi
	chroot $ROOT bash -c 'passwd root'
	utility_unmount_kernelfs

	### Edit fstab ###
	echo
	echo "Editing fstab:"
	echo
	vi $ROOT/etc/fstab

	echo
	echo "Configuration complete."
	echo
}

#------------------------------------------------------------------#
function install_lfsbase
{
	version=$1

	### Download lfs base packages ###

	# create temp dir on install root for package download
	tmpdir="${ROOT}/swltmpdir$RANDOM"

	set -e # exit on error

	### Download lfs-base packages ###
	echo
	echo "Downloading lfs base packages..."
	echo

	lfsbasedir=$tmpdir/lfs-base
	mkdir -pv $lfsbasedir

	url=$SWL_MIRROR_VERSIONS_PATH/$version/base/lfs/
	wget -r -np -nd -P $lfsbasedir $url

	set -e


	### Install lfs base packages ###
	echo
	echo "Installing lfs base packages..."
	echo

	$SWL_INSTALL_CMD $lfsbasedir/*.txz

	### CLEANUP ###
	rm -rf $tmpdir
}

#------------------------------------------------------------------#
function install_swlbase
{

	version=$1

	# create temp dir on install root for package download
        tmpdir="${ROOT}/swltmpdir$RANDOM"
	mkdir -pv $tmpdir

	### Generate lfs-base.list ###
	ls $SWL_PKG_INSTALL_DIR | sed 's/$/.txz/' > $tmpdir/lfs-base.list
	
 	### DOWNLOAD SWL BASE LIST ###
	#set the version
	export SWL_VERSION=$version
	source /usr/sbin/swlm-config
	set +e #exit on error
	wget -P $tmpdir $SWL_SWLBASE_LIST_URL
	set -e

	### DOWNLOAD SWL BASE LIST ###
	swl-manager list -fd $tmpdir/swl-base.list

	### INSTALL SWL BASE LIST ###
	echo
	echo "Installing swl-base packages..."
	echo
	echo "Yes" | swl-manager list -fi $tmpdir/swl-base.list

	### MOVE LFS BASE LIST ###
	mv $tmpdir/lfs-base.list $SWL_LIST_DIR/

	### CLEANUP ###
	rm -rf $tmpdir

}

####################################################################
#
# LIST FUNCTIONS
#
####################################################################

#------------------------------------------------------------------#
function list_check_status
{
	list=$1

	# read list
	while IFS= read -r line; 
	do
		echo "--------------------------------------------------------------------"
		echo "Status of list package $line:"
		# check installed
		echo "INSTALLED: $(package_check_installed $line)"

		# check mirror
		echo "MIRROR: $(mirror_check_package $line)"

		# check downloaded
		echo "DOWNLOADED: $(package_check_downloaded $line)"

		echo
	done < $list

}


#------------------------------------------------------------------#
function list_create_blfs
{
	# iterate script files
        for FILE in $SWL_BLFS_SCRIPT_PATH/*;
        do
                pkg=${FILE#*-z-}

		# pass1
		pass1=false
		if [[ $pkg == *"pass1" ]]; then pkg=${pkg/-pass1/}; pass1=true; fi
		
                found=$(grep "^$pkg " $SWL_PKG_VERSIONS_FILE)
                if [[ -z $found ]]; then
                        found="NOT FOUND: $pkg"
                fi

		# pass1
		if [[ $pass1 == true ]]; then found=${found/  /-pass1  }; fi

		found=${found/  /-}
		found=$found-amd64-swl$SWL_VERSION.txz
                echo $found | tr '[:upper:]' '[:lower:]'
        done
}


#------------------------------------------------------------------#
function list_install
{
	list=$1
        force=$2

	ROOT=${ROOT:-/}

	echo
	read -p "Installing packages to $ROOT. Continue? (Yes): " confirm
	if [[ $confirm != "Yes" ]]; then echo "Cancelling..."; exit 1; fi

        # read list
        while IFS= read -r line;
        do
		# check installed
                installed=$(package_check_installed $line)
                if [[ ! -z $installed && $force == false ]]; then
                        echo "SKIPPING: $line INSTALLED"
                        continue
                fi

		$SWL_INSTALL_CMD $SWL_PKG_DIR_PATH/$line
		error=$?

	done < $list

	### COPY LIST TO LIST DIR ###
	if [[ $error == 0 ]]; then cp -i $list $SWL_LIST_DIR; fi


}


#------------------------------------------------------------------#
function list_remove
{
	### REMOVE LIST ###
	while IFS= read -r line;
        do
		# Check if package is used by another list
                used=$(grep --exclude=$list $line $SWL_LIST_DIR/*)
                if [[ ! -z $used ]]; then
                        echo "SKIPPING: $line USED"
                        continue
                fi

                # remove pkg
                $SWL_REMOVE_CMD $line
                error=$?

        done < $list

	# Remove list file
        if [[ $error == 0 ]]; then
                rmlist=${list##*/}
                rm -i $SWL_LIST_DIR/$rmlist
        fi

}


####################################################################
#
# MIRROR FUNCTIONS
#
####################################################################

#------------------------------------------------------------------#
function mirror_check_package
{
	pkg=$1
        output=""
        dir=${pkg:0:1}
        url="$SWL_MIRROR_PACKAGES_PATH/$dir/$pkg"
	
        wget -q --spider $url
        if [[ $? -eq 0 ]]; then
                output=$url
        fi

        echo $output
}

#------------------------------------------------------------------#
function mirror_get_versions
{
	versions=$(curl -s $SWL_MIRROR_VERSIONS_PATH/	\
                | grep "<li>"                		\
                | sed 's/\/<\/a>.*//g'       		\
		| sed 's/.*\">//g'	     		\
		| xargs)

	echo $versions
}

#------------------------------------------------------------------#
function mirror_download_list
{
	list=$1
	force=$2

	# read list
        while IFS= read -r line;
        do
                # check installed
                installed=$(package_check_installed $line)
                if [[ ! -z $installed && $force == false ]]; then
                        echo "SKIPPING: $line INSTALLED"
                        continue
                fi

                # check mirror
                url=$(mirror_check_package $line)
                if [[ -z $url ]]; then
                        echo "SKIPPING: $line: NOT FOUND ON MIRROR"
                        continue
                fi

                # force remove
                if [[ $force == true ]]; then
                        rm $SWL_PKG_DIR_PATH/$line
                fi

                # download
                wget -nc -P $SWL_PKG_DIR_PATH $url

        done < $list

}





####################################################################
#
# PACKAGE FUNCTIONS
#
####################################################################

#------------------------------------------------------------------#
function package_check_installed
{
        pkg=$1
        pkg=${pkg%.txz}
	echo "$(find $SWL_PKG_INSTALL_DIR -name $pkg)"
}


#------------------------------------------------------------------#
function package_check_downloaded
{
        pkg=$1
	echo "$(find $SWL_PKG_DIR_PATH -name $pkg)"
}


####################################################################
#
# UTILITY FUNCTIONS
#
####################################################################

#-------------------------------------------------------------------#
function utility_mount_kernelfs
{
	{
        mount -v --bind /dev $ROOT/dev
        mount -vt devpts devpts -o gid=5,mode=0620 $ROOT/dev/pts
        mount -vt proc proc $ROOT/proc
        mount -vt sysfs sysfs $ROOT/sys
        mount -vt tmpfs tmpfs $ROOT/run
        if [ -h $ROOT/dev/shm ]; then
          	install -v -d -m 1777 $ROOT$(realpath /dev/shm)
        else
         	 mount -vt tmpfs -o nosuid,nodev tmpfs $ROOT/dev/shm
        fi
        } > /dev/null
}

#-------------------------------------------------------------------#
function utility_unmount_kernelfs
{
	mountpoint -q $ROOT/dev/shm && umount $ROOT/dev/shm
	umount $ROOT/dev/pts
	umount $ROOT/{sys,proc,run,dev}
}
