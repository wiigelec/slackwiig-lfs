#!/bin/bash

####################################################################
#
#
#
####################################################################


#------------------------------------------------------------------#
function get_mirror_versions
{
	versions=$(curl -s $SWL_MIRROR_VERSIONS_PATH	\
                | grep "<li>"                		\
                | sed 's/\/<\/a>.*//g'       		\
		| sed 's/.*\">//g'	     		\
		| xargs)

	echo $versions

}

#------------------------------------------------------------------#
function configure_install
{
	### Confirm ###
	echo
	read -p "Configure $ROOT installation? (Yes): " confirm
	if [[ $confirm != "Yes" ]]; then echo "Aborting..."; exit 1; fi

	### Set root passwd ###
	echo
	echo "Setting new root password:"
	echo

	mount_kernel_fs
	chroot $ROOT bash -c 'passwd root'
	unmount_kernel_fs

	### Edit fstab ###
	echo
	echo "Editing fstab:"
	echo
	vi $ROOT/etc/fstab

	echo
	echo "Configuration complete."
	echo
}


#------------------------------------------------------------------#
function mount_kernel_fs
{
	{
	mount -v --bind /dev $ROOT/dev
	mount -vt devpts devpts -o gid=5,mode=0620 $ROOT/dev/pts
	mount -vt proc proc $ROOT/proc
	mount -vt sysfs sysfs $ROOT/sys
	mount -vt tmpfs tmpfs $ROOT/run
	if [ -h $ROOT/dev/shm ]; then
  		install -v -d -m 1777 $ROOT$(realpath /dev/shm)
	else
	 	 mount -vt tmpfs -o nosuid,nodev tmpfs $ROOT/dev/shm
	fi
	} > /dev/null
}


function unmount_kernel_fs
{
	mountpoint -q $ROOT/dev/shm && umount $ROOT/dev/shm
	umount $ROOT/dev/pts
	umount $ROOT/{sys,proc,run,dev}
}


####################################################################
#
# LIST FUNCTIONS
#
####################################################################

#------------------------------------------------------------------#
function list_check_status
{
	list=$1

	# read list
	while IFS= read -r line; 
	do
		echo "--------------------------------------------------------------------"
		echo "Status of list package $line:"
		# check installed
		echo "INSTALLED: $(package_check_installed $line)"

		# check mirror
		echo "MIRROR: $(mirror_check_package $line)"

		# check downloaded
		echo "DOWNLOADED: $(package_check_downloaded $line)"

		echo
	done < $list

}


#------------------------------------------------------------------#
function list_create_blfs
{
	# iterate script files
        for FILE in $SWL_BLFS_SCRIPT_PATH/*;
        do
                pkg=${FILE#*-z-}

		# pass1
		pass1=false
		if [[ $pkg == *"pass1" ]]; then pkg=${pkg/-pass1/}; pass1=true; fi
		
                found=$(grep "^$pkg " $SWL_PKG_VERSIONS_FILE)
                if [[ -z $found ]]; then
                        found="NOT FOUND: $pkg"
                fi

		# pass1
		if [[ $pass1 == true ]]; then found=${found/  /-pass1  }; fi

		found=${found/  /-}
		found=$found-amd64-swl$SWL_VERSION.txz
                echo $found | tr '[:upper:]' '[:lower:]'
        done
}


#------------------------------------------------------------------#
function list_install
{

	echo
}


####################################################################
#
# MIRROR FUNCTIONS
#
####################################################################

#------------------------------------------------------------------#
function mirror_check_package
{
	pkg=$1
        output=""
        dir=${pkg:0:1}
        url="$SWL_MIRROR_PACKAGES_PATH/$dir/$pkg"
	
        wget -q --spider $url
        if [[ $? -eq 0 ]]; then
                output=$url
        fi

        echo $output
}

#------------------------------------------------------------------#
function mirror_download_list
{
	list=$1
	force=$2

	# read list
        while IFS= read -r line;
        do
                # check installed
                installed=$(package_check_installed $line)
                if [[ ! -z $installed && $force == false ]]; then
                        echo "SKIPPING: $line INSTALLED"
                        continue
                fi

                # check mirror
                url=$(mirror_check_package $line)
                if [[ -z $url ]]; then
                        echo "SKIPPING: $line: NOT FOUND ON MIRROR"
                        continue
                fi

                # force remove
                if [[ $force == true ]]; then
                        rm $SWL_PKG_DIR_PATH/$line
                fi

                # download
                wget -nc -P $SWL_PKG_DIR_PATH $url

        done < $list

}





####################################################################
#
# PACKAGE FUNCTIONS
#
####################################################################

#------------------------------------------------------------------#
function package_check_installed
{
        pkg=$1
        pkg=${pkg%.txz}
	echo "$(find $SWL_PKG_INSTALL_DIR -name $pkg)"
}


#------------------------------------------------------------------#
function package_check_downloaded
{
        pkg=$1
	echo "$(find $SWL_PKG_DIR_PATH -name $pkg)"
}
