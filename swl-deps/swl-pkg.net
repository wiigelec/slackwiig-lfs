#!/bin/bash


#-----------------------------------------------------#
#
#
#
#
#
#-----------------------------------------------------#

#-----------------------------------------------------#
# DEFINES
SWL_DIR="/slackwiig-lfs"
CONFIG_DIR="$SWL_DIR/config"
PACKAGE_DIR=""
PATCH_DIR=""
DEPS_DIR=""
INSTALL_DIR="/var/lib/pkgtools/packages"
PACKAGE_PATH="" # mirror package directory
PATCH_PATH="" # mirror patch directory
DEPS_PATH="" # mirror deps directory
MIRROR_FILE="$CONFIG_DIR/MIRROR" 
VERSION_FILE="$CONFIG_DIR/VERSION" 
VERSION_PATH="" 


#-----------------------------------------------------#
# GLOBAL VARIABLES
gv_action=""
gv_option="" 
gv_package=""
gv_fullpackage=""
gv_swlversion=""
gv_mirror=""
gv_mirrorpackagepath=""
gv_upgradeversion=""
gv_tmpfindfile=""
gv_tmpdepsfile=""
gv_swltmpoutfile=""


#-----------------------------------------------------#
#
# UTILITY FUNCTIONS
#
#-----------------------------------------------------#
#
#-----------------------------------------------------#
# FUNCTION: usage
usage ( )
{
    echo
    echo "Usage:"
    echo
    echo "swl <action> <options> package"
    echo
    echo "actions: find, get, deps, update, upgrade"
    echo "options: -c (check), -d (download), -i (install)"
    echo

} 
#
#-----------------------------------------------------#
# FUNCTION: get_arguments
get_arguments ( )
{
    local error=0

    # get action
    gv_action="$1"
    if [ -z "$gv_action" ] ; then
        echo "No action"
	error=1
    fi
    if [ "$gv_action" == "--help" ] ; then
        usage
	exit
    fi

    # get option
    gv_option="$2"
    if [ -z "$gv_option" ] ; then
        echo "No option"
	error=1
    fi
    
    # get package
    gv_package="$3"
    case $gv_action in
    get | deps | find )
        if [ -z "$gv_package" ] ; then
            echo "No package"
	    error=1
        fi
	;;
    esac

    # display usage and exit
    if [ "$error" == 1 ] || [ "$gv_action" == "--help" ] ; then
        usage
	exit
    fi
} 
#
#-----------------------------------------------------#
# FUNCTION: perform_action
perform_action ( )
{
    # output header
    echo
    echo "===================================================================="
    echo "Checking for packages at $gv_mirror using version $gv_swlversion..."
    echo

    case $gv_action in
    find ) do_find ;;
    get ) do_get ;;
    update ) do_update ;;
    upgrade ) do_upgrade ;;
    deps ) do_deps ;;
    * ) usage ;;
    esac
} 
#
#-----------------------------------------------------#
# FUNCTION: get_mirror 
get_mirror ( )
{
    #echo "get_mirror()"

    # check for config file
    if [ ! -s $MIRROR_FILE ]; then
        echo "$MIRROR_FILE does not exist"
	exit
    fi

    # read mirror file
    gv_mirror=$(head -n 1 $MIRROR_FILE)

    #echo "gv_mirror: $gv_mirror"
}
#
#-----------------------------------------------------#
# FUNCTION: get_swlversion 
get_swlversion ( )
{
    #echo "get_swlversion()"

    # check for config file
    if [ ! -s $VERSION_FILE ]; then
        echo "$VERSION_FILE does not exist"
	exit
    fi

    # read version file
    gv_swlversion=$(head -n 1 $VERSION_FILE)

    #echo "gv_swlversion: $gv_swlversion"
}
#
#-----------------------------------------------------#
# FUNCTION: get_upgradeversion 
get_upgradeversion ( )
{
    #echo "get_upgradeversion()"

    # get version from mirror
    gv_upgradeversion=$(curl --no-progress-meter $VERSION_PATH)
}
#
#-----------------------------------------------------#
# FUNCTION: initialize 
initialize ( )
{
    # get mirror
    get_mirror

    # get swl version
    get_swlversion

    # set package dir
    PACKAGE_DIR="$SWL_DIR/$gv_swlversion/packages/"
    
    # set patch dir
    PATCH_DIR="$SWL_DIR/$gv_swlversion/patches/"

    # set deps dir
    DEPS_DIR="$SWL_DIR/$gv_swlversion/deps/"

    # set package path
    PACKAGE_PATH="$gv_mirror/$gv_swlversion/packages/"
    
    # set patch path
    PATCH_PATH="$gv_mirror/$gv_swlversion/patches/"

    # set deps path
    DEPS_PATH="$gv_mirror/$gv_swlversion/deps/"

    # version path
    VERSION_PATH="$gv_mirror/config/VERSION"
}
#
#-----------------------------------------------------#
# FUNCTION: list_patchpath_files
function list_patchpath_files ( )
{
    #echo "list_patchpath_files()"

    # list path files
    list_path_files $PATCH_PATH
}
#
#-----------------------------------------------------#
# FUNCTION: list_pkgpath_files
function list_pkgpath_files ( )
{
    #echo "list_pkgpath_files()"

    # list path files
    list_path_files $PACKAGE_PATH
}
#
#-----------------------------------------------------#
# FUNCTION: list_patchpath_files
function list_path_files ( )
{
    #echo "list_patchpath_files()"

    # get dir listing
    curl -s $1 | grep \.txz | cut -d\" -f2
}
#
#-----------------------------------------------------#
# FUNCTION: get_installed_pkg
function get_installed_pkg ( )
{
    #echo "get_isntalled_pkg()"

    # search install dir
    find $INSTALL_DIR -type f -name $1-\* | grep ${1}-[0-9] | cut -d\/ -f6
}
#
#-----------------------------------------------------#
# FUNCTION: print_output
function print_output ( )
{
    cat $gv_swltmpoutfile | column -t -s '~~'
}

#-----------------------------------------------------#
#-----------------------------------------------------#
#
# DOWNLOAD FUNCTIONS
#
#-----------------------------------------------------#
#-----------------------------------------------------#
#
#-----------------------------------------------------#
# FUNCTION: download_package_dir
function download_package_dir ( )
{
    echo "download_package_dir()"

    # download directory
    download_directory $PACKAGE_PATH "\.txz" $PACKAGE_DIR
}
#
#-----------------------------------------------------#
# FUNCTION: download_patch_dir
#
function download_patch_dir ( )
{
    #echo "download_patch_dir()"

    # download directory
    download_directory $PATCH_PATH "\.txz" $PATCH_DIR
}
#
#-----------------------------------------------------#
# FUNCTION: download_deps_dir
function download_deps_dir ( )
{
    #echo "download_deps_dir()"

    # download directory
    download_directory $DEPS_PATH "\.dep" $DEPS_DIR
}
#
#-----------------------------------------------------#
# FUNCTION: download_directory 1 path, 2 ext, 3 dir
function download_directory ( )
{
    #echo "download_directory()"
    echo "Downloading directory $1..."
    echo

    local tmpfile=$(mktemp /tmp/tmpfile.XXXXXXXXXX)
    curl --no-progress-meter $1 | grep $2 | cut -d\" -f2 > $tmpfile
    while IFS= read -r line;
    do
        wget -nc -P $3 ${1}$line
    done < $tmpfile
}
#
#-----------------------------------------------------#
# FUNCTION: download_package_file
function download_package_file ( )
{
    #echo "download_package_file()"
    wget -nc -P $PACKAGE_DIR ${PACKAGE_PATH}$1
}

#-----------------------------------------------------#
#-----------------------------------------------------#
#
# FIND FUNCTIONS
#
#-----------------------------------------------------#
#-----------------------------------------------------#
#
#-----------------------------------------------------#
# FUNCTION: find_single_pkg
function find_single_pkg ( )
{
    #echo "find_single_pkg()"

    curl --no-progress-meter $PACKAGE_PATH | grep \"${1}-[0-9] | cut -d\" -f2
}
#
#-----------------------------------------------------#
# FUNCTION: find_multi_pkg
function find_multi_pkg ( )
{
    #echo "find_multi_pkg()"

    curl --no-progress-meter $PACKAGE_PATH | grep txz | cut -d\" -f2 | grep $gv_package
}
#
#-----------------------------------------------------#
# FUNCTION: check_find
function check_find ( )
{
    #echo "check_find()"
    
    find_multi_pkg > $gv_tmpfindfile

    while IFS= read -r line; 
    do
	gv_package=${line%-*}
	gv_package=${gv_package%-*}
	gv_package=${gv_package%-*}
        check_single_pkg >> $gv_swltmpoutfile
    done < $gv_tmpfindfile

    print_output
}
#
#-----------------------------------------------------#
# FUNCTION: download_find
function download_find ( )
{
    echo "download_find()"

    # read temp find file
    while IFS= read -r line; 
    do 
        #echo $line
        download_package_file $line
    done < $gv_tmpfindfile
}
#
#-----------------------------------------------------#
# FUNCTION: install_find
function install_find ( )
{
    echo "install_find()"
}
#
#-----------------------------------------------------#
# FUNCTION: do_find
function do_find ( )
{
    #echo "do_find()"

    # create temp find file
    gv_tmpfindfile=$(mktemp /tmp/tmpfindfile.XXXXXXXXXX)

    # process options
    case $gv_option in
    -c ) 
        check_find
	;;
    -d )
	check_find 
        download_find
	;;
    -i ) 
	check_find
        download_find 
	install_find
	;;
    * ) usage ;;
    esac

    # delete temp find file
    rm $gv_tmpfindfile
}

#-----------------------------------------------------#
#-----------------------------------------------------#
#
# GET FUNCTIONS
#
#-----------------------------------------------------#
#-----------------------------------------------------#
#
#-----------------------------------------------------#
# FUNCTION: check_single_pkg
check_single_pkg ( )
{
    #echo "check_single_pkg"

    # find single package
    gv_fullpackage=$(find_single_pkg $gv_package)

    # generate output
    local foundstring=""
    if [ -z "$gv_fullpackage" ]; then
	foundstring="NOT FOUND:"
	gv_fullpackagepath="<$gv_package>"
        #echo "NOT FOUND: $gv_package at $PACKAGE_PATH"
    else
	foundstring="Found:"
	gv_fullpackagepath=$gv_fullpackage
        #echo "Found: $gv_fullpackage"
    fi

    # check installed
    local installstring="$(get_installed_pkg $gv_package)"
    if [ ! -z "$installstring" ] ; then
	installstring="Installed: $installstring"
    else
        installstring="NOT INSTALLED"
    fi	

    # output
    echo "${foundstring} ${PACKAGE_PATH}${gv_fullpackagepath} ~~ ${installstring}"
}
#-----------------------------------------------------#
# FUNCTION: check_package
check_package ( )
{
    #echo "check_package()"

    # generate output
    check_single_pkg > $gv_swltmpoutfile

    print_output
}
#
#-----------------------------------------------------#
# FUNCTION: download_package
download_package ( )
{
    #echo "download_package(): $gv_mirrorpackagepath" 
    if [ ! -z "$gv_fullpackage" ] ; then
        download_package_file $gv_fullpackage
    fi
}
#
#-----------------------------------------------------#
# FUNCTION: install_package
install_package ( )
{
    echo "install_package()"
}


#-----------------------------------------------------#
# FUNCTION: do_get
do_get ( )
{
    #echo "do_get()"

    # process options
    case $gv_option in
    -c ) 
        check_package
	;;
    -d )
	check_package 
        download_package
	;;
    -i ) 
	check_package
        download_package 
	install_package
	;;
    * ) usage ;;
    esac
} 


#-----------------------------------------------------#
#-----------------------------------------------------#
#
# UPDATE FUNCTIONS
#
#-----------------------------------------------------#
#-----------------------------------------------------#
#
#-----------------------------------------------------#
# FUNCTION: check_patches
function check_patches ( )
{
    #echo "check_patches(): $PATCH_PATH"
    echo "--------------------------------------------------------------------"
    echo "Available patches:"
    echo
    list_patchpath_files
    echo "--------------------------------------------------------------------"
}
#
#-----------------------------------------------------#
# FUNCTION: check_patches
function download_patches ( )
{
    #echo "download_patches()"

    # download patch dir
    download_patch_dir
}
#
#-----------------------------------------------------#
# FUNCTION: check_patches
function install_patches ( )
{
    echo "install_patches()"
}
#
#-----------------------------------------------------#
# FUNCTION: do_update
do_update ( )
{
    #echo "do_update()"

    # process options
    case $gv_option in
    -c ) 
        check_patches
	;;
    -d )
	check_patches 
        download_patches
	;;
    -i ) 
	check_patches
        download_patches 
	install_patches
	;;
    * ) usage ;;
    esac
}


#-----------------------------------------------------#
#-----------------------------------------------------#
#
# UPGRADE FUNCTIONS
#
#-----------------------------------------------------#
#-----------------------------------------------------#
#
#-----------------------------------------------------#
# FUNCTION: check_upgrade
function check_upgrade ( )
{
    #echo "check_upgrade()"
    
    # get upgrade version
    get_upgradeversion

    if [ -z "$gv_upgradeversion" ] ; then
        echo "Version config not found at $gv_mirror"
	return
    fi
    # compare mirror version to local version
    if [ "$gv_swlversion" != "$gv_upgradeversion" ] ; then
        echo "Upgrade available:"
        echo "$gv_swlversion --> $gv_upgradeversion"
    else
        echo "Version up to date."
    fi	
}
#-----------------------------------------------------#
# FUNCTION: download_upgrade
function download_upgrade ( )
{
    #echo "download_upgrade()"

    # create new version directories
    echo
    local upgradedir=$SWL_DIR/$gv_upgradeversion
    local upgradepath=${gv_mirror}/$gv_upgradeversion
    mkdir -pv $upgradedir/{packages,patches,deps}
    echo

    # download packages
    download_directory $upgradepath/packages/ "txz" $upgradedir/packages

    # download deps
    download_directory $upgradepath/deps/ "\.dep" $upgradedir/deps
}
#-----------------------------------------------------#
# FUNCTION: install_upgrade
function install_upgrade ( )
{
    echo "install_upgrade()"
}
#-----------------------------------------------------#
# FUNCTION: do_upgrade
do_upgrade ( )
{
    #echo "do_upgrade()"

    # process options
    case $gv_option in
    -c ) 
        check_upgrade
	;;
    -d )
	check_upgrade 
        download_upgrade
	;;
    -i ) 
	check_upgrade
        download_upgrade 
	install_upgrade
	;;
    * ) usage ;;
    esac
}


#-----------------------------------------------------#
#-----------------------------------------------------#
#
# DEPS FUNCTIONS
#
#-----------------------------------------------------#
#-----------------------------------------------------#
#
#-----------------------------------------------------#
# FUNCTION: find_dotdeps_file 
function find_dotdeps_file ( )
{
    local dotdepsfile=""
    local found=0;
    local procd=0;

    # check groupxx file 
    dotdepsfile=$(find $DEPS_DIR -type f -iname ${1}groupxx.dep)
    if [ ! -z "$dotdepsfile" ] ; then
        found=1
        if [ ! -z $(grep $dotdepsfile $gv_tmpdepsfile | head -n1) ] ; then
            procd=1 ;
        fi
    fi	
    # if found but not processed
    if [ "$found" == 1 ] && [ "$procd" == 0 ] ; then
        echo $dotdepsfile >> $gv_tmpdepsfile
        echo $dotdepsfile
	return
    fi

    # check nongroupxx file
    found=0
    procd=0
    dotdepsfile=$(find $DEPS_DIR -type f -iname ${1}.dep)
    if [ ! -z "$dotdepsfile" ] ; then
        found=1
        if [ ! -z $(grep $dotdepsfile $gv_tmpdepsfile | head -n1) ] ; then
            procd=1
        fi
    fi
    # if found but not processed
    if [ "$found" == 1 ] && [ "$procd" == 0 ] ; then
        echo $dotdepsfile >> $gv_tmpdepsfile
        echo $dotdepsfile
	return
    fi

    echo ""
}
#
#-----------------------------------------------------#
# FUNCTION: iterate_deps 
function iterate_deps ( )
{
    #echo "iterate_deps() $1"

    # read file
    while IFS= read -r line; 
    do 
	#echo $line; 

	# get dependency level
	local deplevel=$(echo $line | cut -d' ' -f1)
	if [ "$deplevel" != 1 ] && [ "$deplevel" != 2 ] ; then
	    continue
	fi

	# parse deppackage
	local deppackage=$(echo $line | cut -d' ' -f3)
	#echo "deppackage: $deppackage"

	# find deppackage dotdepsfile
	local dotdepsfile=$(find_dotdeps_file $deppackage)
	#echo "find_dotdeps_file returned: $dotdepsfile"

	# iterate if found
	if [ ! -z "$dotdepsfile" ]; then
	    iterate_deps $dotdepsfile
	fi
    done < $1
}
#
#-----------------------------------------------------#
# FUNCTION: build_deps_file 
function build_deps_file( )
{
    #echo "build_deps_file()"
    
    # find deps file
    local depsfile=$(find_dotdeps_file $gv_package) 
    if [ -z "$depsfile" ] ; then
	echo "No .dep file found for $gv_package"
	return
    fi
    
    # iterate deps
    iterate_deps $depsfile

    # trim leading path
    #echo "DEPS_DIR: $DEPS_DIR"
    local sedir=${DEPS_DIR//\//\\\/}
    #echo "sedir: $sedir"
    sed -i "s/$sedir//g" $gv_tmpdepsfile

    # remove groupxx
    sed -i '/.*groupxx.*/d' $gv_tmpdepsfile

    # remove .dep
    sed -i 's/.dep//g' $gv_tmpdepsfile
    
    # remove pass1
    sed -i '/.*pass1.*/d' $gv_tmpdepsfile

    # all lower case
    sed -i 's/./\L&/g' $gv_tmpdepsfile
}
#
#-----------------------------------------------------#
# FUNCTION: check_deps
function check_deps ( )
{
    #echo "check_deps()"
    
    if [ ! -z "$(check_single_pkg | grep 'NOT FOUND')" ] ; then
	echo "No package $gv_package"
        return
    fi


    # build deps file
    build_deps_file

    # display deps
    echo
    echo "$gv_package dependencies:"
    echo "--------------------------------------------------------------------"
    echo
    while IFS= read -r line; 
    do 
        gv_package=$line
        check_single_pkg >> $gv_swltmpoutfile
    done < $gv_tmpdepsfile
    print_output
    echo
    echo "--------------------------------------------------------------------"
}
#
#-----------------------------------------------------#
# FUNCTION: download_deps
function download_deps ( )
{
    #echo "download_deps()"
    echo
    echo "Downloading $gv_package dependencies..."
    echo

    # read deps file
    while IFS= read -r line; 
    do 
	# check package
        local fullpkg=$(find_single_pkg $line)
        if [ -z "$fullpkg" ] ; then
	    echo "Package $line not found"
	    continue
	fi
        
	# download package
        download_package_file $fullpkg
        
    done < $gv_tmpdepsfile
}
#
#-----------------------------------------------------#
# FUNCTION: process_deps
function install_deps ( )
{
    echo "install_deps()"
}
#
#-----------------------------------------------------#
# FUNCTION: do_deps
function do_deps ( )
{
    #echo "do_deps()"

    # create temp deps file
    gv_tmpdepsfile=$(mktemp /tmp/tmpdepsfile.XXXXXXXXXX)

    # process options
    case $gv_option in
    -c ) 
        check_deps
	;;
    -d )
	check_deps
        download_deps
	;;
    -i ) 
	check_deps
        download_deps 
	install_deps
	;;
    * ) usage ;;
    esac

    # delete temp deps file
    rm $gv_tmpdepsfile

}


#-----------------------------------------------------#
#
# MAIN
#
#-----------------------------------------------------#

# parse arguments
get_arguments $1 $2 $3

# open tmp output file
gv_swltmpoutfile=$(mktemp /tmp/swltmpoutfile.XXXXXXXXXX)

# initialize
initialize

# perform action
perform_action 

echo
echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
echo "Finished."
echo

# delete tmp output file
rm $gv_swltmpoutfile

# return
exit




