#!/bin/bash

#-----------------------------------------------------------------------------#
#
# swl-deps
# Dependency manager for slackwiig-lfs
#
#-----------------------------------------------------------------------------#

### CONFIGURATION ###
SCRIPT_DIR="$HOME/blfs_root/scripts/"
INSTALL_DIR="$ROOT/var/lib/pkgtools/packages/"
SWL_DIR="$ROOT/var/lib/swl"
PKG_DIR="$SWL_DIR/packages/"
LIST_DIR="$SWL_DIR/lists"
SWL_VERSION="121"
MIRROR="http://swl-mirror:8000/swl-packages.$SWL_VERSION/"

#-----------------------------------------------------------------------------#
function createList ( )
{
	if [[ -z "$location" ]]; then
		location=$SCRIPT_DIR
	fi

	for FILE in $location/*;
	do
		pkg=${FILE#*-z-}
		pkg=$(echo $pkg | tr '[:upper:]' '[:lower:]')
		found=$(grep ^$pkg $SWL_DIR/swl-packages-121.list | head -n1)
		if [[ -z $found ]]; then
			found="NOT FOUND: $pkg"
		fi
		echo "$found"
	done

}

#-----------------------------------------------------------------------------#
function browseLists ( )
{
	if [[ ! -e $LIST_DIR ]]; then
		echo "LIST_DIR $LIST_DIR does not exist."
		return
	fi

	lynx ${MIRROR}lists/

}

#-----------------------------------------------------------------------------#
function browsePatches ( )
{
	lynx ${MIRROR}packages/patches/
}

#-----------------------------------------------------------------------------#
function installStatus ( )
{
	if [[ -z "$list" ]]; then 
		echo "No list specified" 
		exit
	fi

	# read file
    	while IFS= read -r line;
    	do
		local out_line=""
		# check installed
		out_line=$(check_installed $line)
		if [[ ! -z $out_line ]]; then
			echo "$line  INSTALLED"
			continue
		fi

		# check file
		out_line=$(check_file $line)
		if [[ ! -z $out_line ]]; then
			echo "$line  $out_line"
			continue
		fi

		# check mirror
		out_line=$(check_mirror $line)
		if [[ ! -z $out_line ]]; then
			echo "$line  $out_line"
			continue
		fi

		out_line="NOT FOUND"
		
		echo "$line  $out_line"

    	done < $list

}
    	
#-----------------------------------------------------------------------------#
function removeStatus ( )
{
	if [[ -z "$list" ]]; then 
		echo "No list specified" 
		exit
	fi

	# read file
        while IFS= read -r line;
        do
		# check used
		used=$(check_used $line)
		if [[ ! -z $used ]]; then
			echo "$line  USED"
		else
			echo "$line"
		fi
		
	done < $list
}

#-----------------------------------------------------------------------------#
function downloadDeps ( )
{
	if [[ -z "$list" ]]; then 
		echo "No list specified" 
		exit
	fi
	
	# read list
    	while IFS= read -r line;
    	do
		# check mirror
		local url=$(check_mirror $line)
		if [[ -z $url ]]; then
			echo "SKIPPING $line: NOT FOUND ON MIRROR"
			continue
		fi

		# check installed
		local installed=$(check_installed $line)
		if [[ ! -z $installed && $force == 0 ]]; then
			echo "SKIPPING: $line INSTALLED"
			continue
		fi

		# force remove
		if [[ $force == 1 ]]; then
			rm $PKG_DIR/$line
		fi

		# download
		wget -nc -P $PKG_DIR $url

    	done < $list
}

#-----------------------------------------------------------------------------#
function installDeps ( )
{
	if [[ -z "$list" ]]; then 
		echo "No list specified" 
		exit
	fi
	if [[ -z "$install_cmd" ]]; then 
		echo "No install command specified" 
		exit
	fi

	# read list
	local error=0
        while IFS= read -r line;
        do
		local pkg_file=$(check_installed $line)
		if [[ ! -z $pkg_file && $force == 0 ]]; then
			echo "SKIPPING: $line INSTALLED"
			continue
		fi
                pkg_file=$(check_file $line)
                if [[ -z $pkg_file ]]; then
                        echo "SKIPPING: $line NOT FOUND"
                        continue
                fi

		# install pkg
		$install_cmd $pkg_file
		error=$?
		
        done < $list

	if [[ $error = 0 ]]; then
		cp -i $list $LIST_DIR
	fi

}

#-----------------------------------------------------------------------------#
function removeDeps ( )
{
        if [[ -z "$list" ]]; then
                echo "No list specified"
                exit
        fi
        if [[ -z "$install_cmd" ]]; then
                echo "No remove command specified"
                exit
        fi

        # read list
	local error=0
        while IFS= read -r line;
        do
                local used=$(check_used $line)
                if [[ ! -z $used ]]; then
                        echo "SKIPPING: $line USED"
                        continue
                fi

                # remove pkg
                $remove_cmd $line
		error=$?

        done < $list

	if [[ $error = 0 ]]; then
		rmlist=${list##*/}
		rm -i $LIST_DIR/$rmlist
	fi

}

#-----------------------------------------------------------------------------#
function auditLists ( )
{
	echo ""
	echo "Auditing lists..."
	echo "Searching for list packages that are not installed..."
	echo ""

	for FILE in $LIST_DIR/*;
	do
		echo "------------------------------------------------------------"
		echo "Auditing list $FILE:"
		echo ""
        
		while IFS= read -r line;
		do
			# remove .txz
			name=${line%.txz}
			found="$(find $INSTALL_DIR -type f -name $name)"
			if [[ -z "$found" ]]; then
				echo "$line: NOT INSTALLED"
			fi
        
		done < $FILE
		echo ""
	done

	echo ""
}

#-----------------------------------------------------------------------------#
function auditPackages ( )
{
	echo ""
	echo "Auditing installed packages..."
	echo "Searching for packages not associated with a list..."
	echo ""
	for FILE in $INSTALL_DIR/*;
	do
		pkg=${FILE##*/}
		found=$(grep $pkg $LIST_DIR/*)
		if [[ -z "$found" ]]; then
			echo "$pkg: NO LIST"
		fi
	done

	echo ""
}

#-----------------------------------------------------------------------------#
function auditFiles ( )
{
	echo ""
	echo "Auditing files..."
	echo "Searching for files not associated with an installed package..."
	echo ""
	for FILE in $(find / -type f -o -type d \
		-path /sys -prune \
		-o -path /proc -prune \
		-o -path /run -prune \
		-o -path /var/lib/pkgtools -prune \
		-o -path /var/lib/swl -prune \
		-o -path /root -prune \
		-o -path /home -prune \
		-o -path /var/log -prune)
	do
		pkg=$(echo $FILE | sed 's/\/usr\/lib/lib/g')
		pkg=$(echo $FILE | sed 's/\/usr\/sbin/sbin/g')
		pkg=${pkg#/}
		found=$(grep $pkg $INSTALL_DIR/*)
		if [[ -z "$found" ]]; then
			echo $FILE
		fi
	done

	echo ""
}

#-----------------------------------------------------------------------------#
function auditInstalled ( )
{
	echo""
	echo "Auditing installed package files..."
	echo "Searching for package files that cannot be found on the file system..."
	echo""

	for FILE in $INSTALL_DIR/*;
	do
		fileList=0
		while IFS= read -r line;
		do
			if [[ "$line" == "FILE LIST:" ]]; then fileList=1; continue; fi
			if [[ "$fileList" == 0 ]]; then continue; fi

			# check exists
			check="/$line"
			if [[ "$check" == "/install/"* ]]; then continue; fi
			if [[ -f $check ]]; then continue; fi
			if [[ -d $check ]]; then continue; fi

			pkg=${FILE##*/}

			echo "$pkg:  $check  NOT FOUND"

		done < $FILE

	done

	echo ""
}

#-----------------------------------------------------------------------------#
function check_installed ( )
{
	pkg=$1
	pkg=${pkg%.txz}
	local output=""
	if [[ $(find "$INSTALL_DIR/" -name $pkg) ]]; then
		output="$INSTALL_DIR/$pkg"
	fi

	echo $output
}

#-----------------------------------------------------------------------------#
function check_file ( )
{
	pkg=$1
	local output=""
	if [[ $(find "$PKG_DIR/" -maxdepth 1 -name $pkg) ]]; then
		output="$PKG_DIR/$pkg"
	fi

	echo $output
}

#-----------------------------------------------------------------------------#
function check_mirror ( )
{
	pkg=$1
	local output=""
	local url=${MIRROR}packages
	if [[ "$list" == *"lfs-base.list" ]]; then
	       url="$url/lfs-base/$pkg"
        else
		dir=${pkg:0:1}
		url="$url/$dir/$pkg"
	fi

        wget -q --spider $url
	if [[ $? -eq 0 ]]; then
		output=$url
	fi

	echo $output
}

#-----------------------------------------------------------------------------#
function check_used ( )
{
	pkg=$1
	echo "$(grep --exclude=$list $pkg $LIST_DIR*)"
}

#-----------------------------------------------------------------------------#
function usage ( )
{
	echo "-c | --create"
	echo "-b | --browse"
	echo "-s | --status"
	echo "-(f)d | --(force-)download"
	echo "-(f)i | --(force-)install"
	echo "-u | --remove-status"
	echo "-r | --remove"
	echo "-p | --patch"
	echo "-ap|--audit-packages"
	echo "-al|--audit-lists"
	echo "-af|--audit-files"
	echo "-ai|--audit-installed"
	exit
}

###############################################################################
### MAIN ###

# parse command line
action=$1
list=$2
install_cmd=$3
remove_cmd=$3
force=0


case $action in
    -c|--create )
        createList
        ;;
    -b|--browse )
        browseLists
        ;;
    -s|--install-status )
	installStatus
        ;;
    -d|--download )
    	downloadDeps
        ;;
    -fd|--force-download )
	force=1
    	downloadDeps
        ;;
    -i|--install )
    	installDeps
        ;;
    -fi|--force-install )
	force=1
    	installDeps
        ;;
    -u|--remove-status )
    	removeStatus
        ;;
    -r|--remove )
    	removeDeps
        ;;
    -p|--patch )
        browsePatches
        ;;
    -ap|--audit-packages )
        auditPackages
        ;;
    -al|--audit-lists )
        auditLists
        ;;
    -af|--audit-files )
        auditFiles
        ;;
    -ai|--audit-installed )
        auditInstalled
        ;;
    * ) usage ;;
esac

###############################################################################


